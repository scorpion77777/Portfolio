{
  "version": 3,
  "sources": ["../../../../app/routes/home/kudo.$userId.tsx"],
  "sourcesContent": ["import { getUserById } from \"~/utils/user.server\"\nimport { Modal } from '~/components/modal';\nimport { getUser } from '~/utils/auth.server'\n\nimport { useLoaderData, useActionData } from \"@remix-run/react\"\nimport { UserCircle } from \"~/components/user-circle\";\nimport { useState } from \"react\";\nimport { SelectBox } from '~/components/select-box'\nimport { colorMap, emojiMap } from \"~/utils/constants\";\nimport { Kudo } from \"~/components/kudo\";\n\nimport { ActionFunction, json, LoaderFunction, redirect } from \"@remix-run/node\"\nimport { createKudo } from \"~/utils/kudos.server\";\nimport { Color, Emoji, KudoStyle } from '@prisma/client'\nimport { requireUserId } from \"~/utils/auth.server\";\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n    const { userId } = params\n    const user = await getUser(request)\n\n    if (typeof userId !== 'string') {\n        return redirect('/home')\n    }\n\n    const recipient = await getUserById(userId)\n    return json({ recipient, user })\n}\n\nexport const action: ActionFunction = async ({ request }) => {\n    const form = await request.formData();\n    const userId = await requireUserId(request)\n\n    const message = form.get('message')\n    const backgroundColor = form.get('backgroundColor')\n    const textColor = form.get('textColor')\n    const emoji = form.get('emoji')\n    const recipientId = form.get('recipientId')\n\n    if (\n        typeof message !== 'string'\n        || typeof recipientId !== 'string'\n        || typeof backgroundColor !== 'string'\n        || typeof textColor !== 'string'\n        || typeof emoji !== 'string'\n    ) {\n        return json({ error: `Invalid Form Data` }, { status: 400 });\n    }\n\n    if (!message.length) {\n        return json({ error: `Please provide a message.` }, { status: 400 });\n    }\n\n    if (!recipientId.length) {\n        return json({ error: `No recipient found...` }, { status: 400 });\n    }\n\n    await createKudo(\n        message,\n        userId,\n        recipientId,\n        {\n            backgroundColor: backgroundColor as Color,\n            textColor: textColor as Color,\n            emoji: emoji as Emoji\n        }\n    )\n\n    return redirect('/home')\n}\n\nexport default function KudoModal() {\n    const actionData = useActionData()\n    const [formError] = useState(actionData?.error || '')\n    const [formData, setFormData] = useState({\n        message: '',\n        style: {\n            backgroundColor: 'RED',\n            textColor: 'WHITE',\n            emoji: 'THUMBSUP',\n        } as KudoStyle\n    })\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, field: string) => {\n        setFormData(data => ({ ...data, [field]: e.target.value }))\n    }\n\n    const handleStyleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, field: string) => {\n        setFormData(data => ({\n            ...data, style: {\n                ...data.style,\n                [field]: e.target.value\n            }\n        }))\n    }\n\n    const getOptions = (data: any) => Object.keys(data).reduce((acc: any[], curr) => {\n        acc.push({\n            name: curr.charAt(0).toUpperCase() + curr.slice(1).toLowerCase(),\n            value: curr\n        })\n        return acc\n    }, [])\n\n    const colors = getOptions(colorMap)\n    const emojis = getOptions(emojiMap)\n\n    const { recipient, user } = useLoaderData()\n\n    return <Modal isOpen={true} className=\"w-2/3 p-10\">\n        <div className=\"text-xs font-semibold text-center tracking-wide text-red-500 w-full mb-2\">\n            {formError}\n        </div>\n        <form method=\"post\">\n            <input type=\"hidden\" value={recipient.id} name=\"recipientId\" />\n            <div className=\"flex flex-col md:flex-row gap-y-2 md:gap-y-0\">\n                <div className=\"text-center flex flex-col items-center gap-y-2 pr-8\">\n                    <UserCircle profile={recipient.profile} className=\"h-24 w-24\" />\n                    <p className=\"text-blue-300\" >{recipient.profile.firstName} {recipient.profile.lastName}</p>\n                    {\n                        recipient.profile.department && (\n                            <span className=\"px-2 py-1 bg-gray-300 rounded-xl text-blue-300 w-auto\">\n                                {recipient.profile.department[0].toUpperCase() + recipient.profile.department.toLowerCase().slice(1)}\n                            </span>\n                        )\n                    }\n                </div>\n                <div className=\"flex-1 flex flex-col gap-y-4\">\n                    <textarea\n                        name=\"message\"\n                        className=\"w-full rounded-xl h-40 p-4\"\n                        value={formData.message}\n                        onChange={e => handleChange(e, 'message')}\n                        placeholder={`Say something nice about ${recipient.profile.firstName}...`}\n                    />\n                    <div className=\"flex flex-col items-center md:flex-row md:justify-start gap-x-4\">\n                        <SelectBox\n                            options={colors}\n                            name=\"backgroundColor\"\n                            value={formData.style.backgroundColor}\n                            onChange={e => handleStyleChange(e, 'backgroundColor')}\n                            label=\"Background Color\"\n                            containerClassName=\"w-36\"\n                            className=\"w-full rounded-xl px-3 py-2 text-gray-400\"\n                        />\n                        <SelectBox\n                            options={colors}\n                            name=\"textColor\"\n                            value={formData.style.textColor}\n                            onChange={e => handleStyleChange(e, 'textColor')}\n                            label=\"Text Color\"\n                            containerClassName=\"w-36\"\n                            className=\"w-full rounded-xl px-3 py-2 text-gray-400\"\n                        />\n                        <SelectBox\n                            options={emojis}\n                            label=\"Emoji\"\n                            name=\"emoji\"\n                            value={formData.style.emoji}\n                            onChange={e => handleStyleChange(e, 'emoji')}\n                            containerClassName=\"w-36\"\n                            className=\"w-full rounded-xl px-3 py-2 text-gray-400\"\n                        />\n                    </div>\n                </div>\n            </div>\n            <br />\n            <p className=\"text-blue-600 font-semibold mb-2\">Preview</p>\n            <div className=\"flex flex-col items-center md:flex-row gap-x-24 gap-y-2 md:gap-y-0\">\n                <Kudo profile={user.profile} kudo={formData} />\n                <div className=\"flex-1\" />\n                <button type=\"submit\" className=\"rounded-xl bg-yellow-300 font-semibold text-blue-600 w-80 h-12 transition duration-300 ease-in-out hover:bg-yellow-400 hover:-translate-y-1\">\n                    Send\n                </button>\n            </div>\n        </form>\n    </Modal>\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kBAA4B;AAE5B,kBAAwB;AAIxB,IAAAA,gBAAyB;AAMzB,mBAA2B;AAE3B,IAAAC,eAA8B;AA+FtB;AAvCO,SAAR,YAA6B;AAChC,QAAM,aAAa,cAAc;AACjC,QAAM,CAAC,SAAS,QAAI,yBAAS,yCAAY,UAAS,EAAE;AACpD,QAAM,CAAC,UAAU,WAAW,QAAI,wBAAS;AAAA,IACrC,SAAS;AAAA,IACT,OAAO;AAAA,MACH,iBAAiB;AAAA,MACjB,WAAW;AAAA,MACX,OAAO;AAAA,IACX;AAAA,EACJ,CAAC;AAED,QAAM,eAAe,CAAC,GAA8D,UAAkB;AAClG,gBAAY,WAAS,EAAE,GAAG,MAAM,CAAC,QAAQ,EAAE,OAAO,MAAM,EAAE;AAAA,EAC9D;AAEA,QAAM,oBAAoB,CAAC,GAA8D,UAAkB;AACvG,gBAAY,WAAS;AAAA,MACjB,GAAG;AAAA,MAAM,OAAO;AAAA,QACZ,GAAG,KAAK;AAAA,QACR,CAAC,QAAQ,EAAE,OAAO;AAAA,MACtB;AAAA,IACJ,EAAE;AAAA,EACN;AAEA,QAAM,aAAa,CAAC,SAAc,OAAO,KAAK,IAAI,EAAE,OAAO,CAAC,KAAY,SAAS;AAC7E,QAAI,KAAK;AAAA,MACL,MAAM,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,CAAC,EAAE,YAAY;AAAA,MAC/D,OAAO;AAAA,IACX,CAAC;AACD,WAAO;AAAA,EACX,GAAG,CAAC,CAAC;AAEL,QAAM,SAAS,WAAW,QAAQ;AAClC,QAAM,SAAS,WAAW,QAAQ;AAElC,QAAM,EAAE,WAAW,KAAK,IAAI,cAAc;AAE1C,SAAO,mDAAC,SAAM,QAAQ,MAAM,WAAU,cAClC;AAAA,uDAAC,SAAI,WAAU,4EACV,uBADL;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,UAAK,QAAO,QACT;AAAA,yDAAC,WAAM,MAAK,UAAS,OAAO,UAAU,IAAI,MAAK,iBAA/C;AAAA;AAAA;AAAA;AAAA,aAA6D;AAAA,MAC7D,mDAAC,SAAI,WAAU,gDACX;AAAA,2DAAC,SAAI,WAAU,uDACX;AAAA,6DAAC,cAAW,SAAS,UAAU,SAAS,WAAU,eAAlD;AAAA;AAAA;AAAA;AAAA,iBAA8D;AAAA,UAC9D,mDAAC,OAAE,WAAU,iBAAkB;AAAA,sBAAU,QAAQ;AAAA,YAAU;AAAA,YAAE,UAAU,QAAQ;AAAA,eAA/E;AAAA;AAAA;AAAA;AAAA,iBAAwF;AAAA,UAEpF,UAAU,QAAQ,cACd,mDAAC,UAAK,WAAU,yDACX,oBAAU,QAAQ,WAAW,GAAG,YAAY,IAAI,UAAU,QAAQ,WAAW,YAAY,EAAE,MAAM,CAAC,KADvG;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aAPZ;AAAA;AAAA;AAAA;AAAA,eAUA;AAAA,QACA,mDAAC,SAAI,WAAU,gCACX;AAAA;AAAA,YAAC;AAAA;AAAA,cACG,MAAK;AAAA,cACL,WAAU;AAAA,cACV,OAAO,SAAS;AAAA,cAChB,UAAU,OAAK,aAAa,GAAG,SAAS;AAAA,cACxC,aAAa,4BAA4B,UAAU,QAAQ;AAAA;AAAA,YAL/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMA;AAAA,UACA,mDAAC,SAAI,WAAU,mEACX;AAAA;AAAA,cAAC;AAAA;AAAA,gBACG,SAAS;AAAA,gBACT,MAAK;AAAA,gBACL,OAAO,SAAS,MAAM;AAAA,gBACtB,UAAU,OAAK,kBAAkB,GAAG,iBAAiB;AAAA,gBACrD,OAAM;AAAA,gBACN,oBAAmB;AAAA,gBACnB,WAAU;AAAA;AAAA,cAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQA;AAAA,YACA;AAAA,cAAC;AAAA;AAAA,gBACG,SAAS;AAAA,gBACT,MAAK;AAAA,gBACL,OAAO,SAAS,MAAM;AAAA,gBACtB,UAAU,OAAK,kBAAkB,GAAG,WAAW;AAAA,gBAC/C,OAAM;AAAA,gBACN,oBAAmB;AAAA,gBACnB,WAAU;AAAA;AAAA,cAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQA;AAAA,YACA;AAAA,cAAC;AAAA;AAAA,gBACG,SAAS;AAAA,gBACT,OAAM;AAAA,gBACN,MAAK;AAAA,gBACL,OAAO,SAAS,MAAM;AAAA,gBACtB,UAAU,OAAK,kBAAkB,GAAG,OAAO;AAAA,gBAC3C,oBAAmB;AAAA,gBACnB,WAAU;AAAA;AAAA,cAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQA;AAAA,eA3BJ;AAAA;AAAA;AAAA;AAAA,iBA4BA;AAAA,aApCJ;AAAA;AAAA;AAAA;AAAA,eAqCA;AAAA,WAjDJ;AAAA;AAAA;AAAA;AAAA,aAkDA;AAAA,MACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MACJ,mDAAC,OAAE,WAAU,oCAAmC,uBAAhD;AAAA;AAAA;AAAA;AAAA,aAAuD;AAAA,MACvD,mDAAC,SAAI,WAAU,sEACX;AAAA,2DAAC,QAAK,SAAS,KAAK,SAAS,MAAM,YAAnC;AAAA;AAAA;AAAA;AAAA,eAA6C;AAAA,QAC7C,mDAAC,SAAI,WAAU,YAAf;AAAA;AAAA;AAAA;AAAA,eAAwB;AAAA,QACxB,mDAAC,YAAO,MAAK,UAAS,WAAU,+IAA8I,oBAA9K;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WALJ;AAAA;AAAA;AAAA;AAAA,aAMA;AAAA,SA7DJ;AAAA;AAAA;AAAA;AAAA,WA8DA;AAAA,OAlEG;AAAA;AAAA;AAAA;AAAA,SAmEP;AACJ;",
  "names": ["import_react", "import_auth"]
}

{
  "version": 3,
  "sources": ["empty-module:../utils/validators.server", "empty-module:../utils/auth.server", "../../../app/routes/login.tsx"],
  "sourcesContent": ["module.exports = {};", "module.exports = {};", "// login.tsx\nimport { useState, useEffect, useRef } from 'react'\nimport { Layout } from '../components/layout'\nimport { FormField } from '../components/form-field'\nimport { validateEmail, validateName, validatePassword } from '../utils/validators.server'\nimport type { ActionFunction, LoaderFunction } from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node'\nimport { login, register, getUser } from '../utils/auth.server'\nimport { useActionData } from '@remix-run/react'\n\nexport const loader: LoaderFunction = async ({ request }) => {\n    // If there's already a user in the session, redirect to the home page\n    return await getUser(request) ? redirect('/') : null\n}\n\nexport const action: ActionFunction = async ({ request }) => {\n    const form = await request.formData();\n    const action = form.get(\"_action\");\n    const email = form.get(\"email\");\n    const password = form.get(\"password\");\n    let firstName = form.get(\"firstName\");\n    let lastName = form.get(\"lastName\");\n\n    // If not all data was passed, error\n    if (\n        typeof action !== \"string\" ||\n        typeof email !== \"string\" ||\n        typeof password !== \"string\"\n    ) {\n        return json({ error: `Invalid Form Data`, form: action }, { status: 400 });\n    }\n\n    // If not all data was passed, error\n    if (\n        action === 'register' && (\n            typeof firstName !== \"string\" ||\n            typeof lastName !== \"string\"\n        )\n    ) {\n        return json({ error: `Invalid Form Data`, form: action }, { status: 400 });\n    }\n\n    // Validate email & password\n    const errors = {\n        email: validateEmail(email),\n        password: validatePassword(password),\n        ...(action === 'register' ? {\n            firstName: validateName(firstName as string || ''),\n            lastName: validateName(lastName as string || ''),\n        } : {})\n    };\n\n    //  If there were any errors, return them\n    if (Object.values(errors).some(Boolean))\n        return json({ errors, fields: { email, password, firstName, lastName }, form: action }, { status: 400 });\n\n    switch (action) {\n        case 'login': {\n            return await login({ email, password })\n        }\n        case 'register': {\n            firstName = firstName as string\n            lastName = lastName as string\n            return await register({ email, password, firstName, lastName })\n        }\n        default:\n            return json({ error: `Invalid Form Data` }, { status: 400 });\n    }\n}\n\nexport default function Login() {\n    const actionData = useActionData()\n    const firstLoad = useRef(true)\n    const [action, setAction] = useState('login')\n    const [errors, setErrors] = useState(actionData?.errors || {})\n    const [formError, setFormError] = useState(actionData?.error || '')\n    const [formData, setFormData] = useState({\n        email: actionData?.fields?.email || '',\n        password: actionData?.fields?.password || '',\n        firstName: actionData?.fields?.lastName || '',\n        lastName: actionData?.fields?.firstName || '',\n    })\n\n    // Updates the form data when an input changes\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>, field: string) => {\n        setFormData(form => ({ ...form, [field]: event.target.value }))\n    }\n\n    useEffect(() => {\n        // Clear the form if we switch forms\n        if (!firstLoad.current) {\n            const newState = {\n                email: '',\n                password: '',\n                firstName: '',\n                lastName: ''\n            }\n            setErrors(newState)\n            setFormError('')\n            setFormData(newState)\n        }\n    }, [action])\n\n    useEffect(() => {\n        if (!firstLoad.current) {\n            setFormError('')\n        }\n    }, [formData])\n\n    useEffect(() => {\n        // We don't want to reset errors on page load because we want to see them\n        firstLoad.current = false\n    }, [])\n\n    return (\n        <Layout>\n            <div className=\"h-full justify-center items-center flex flex-col gap-y-4\">\n                {/* Form Switcher Button */}\n                <button\n                    onClick={() => setAction(action == 'login' ? 'register' : 'login')}\n                    className=\"absolute top-8 right-8 rounded-xl bg-yellow-300 font-semibold text-blue-600 px-3 py-2 hover:bg-yellow-400 hover:-translate-y-1\"\n                >{action === 'login' ? 'Sign Up' : 'Sign In'}</button>\n                <img className=\"h-24 w-24 m-2 ml-4 cursor-pointer hover:shadow-3xl rounded-full mb-5\"\n                    src=\"https://img.icons8.com/plasticine/512/homer-simpson.png\"\n                    alt=\"Sonic Youth On Stage\"></img>\n                <h2 className=\"text-3xl font-extrabold text-yellow-300 shadow-2xl\">Welcome to My Team</h2>\n\n                <p className=\"font-semibold text-slate-300\">{\n                    action === 'login' ? 'Log In To Connect with the team!' : 'Sign Up To Get Started!'\n                }</p>\n                <form method=\"POST\" className=\"rounded-2xl bg-gray-200 p-6 w-96 shadow-2xl\">\n                    <div className=\"text-xs font-semibold text-center tracking-wide text-red-500 w-full\">\n                        {formError}\n                    </div>\n                    <FormField\n                        htmlFor=\"email\"\n                        label=\"Email\"\n                        value={formData.email}\n                        onChange={e => handleInputChange(e, 'email')}\n                        error={errors?.email}\n                    />\n                    <FormField\n                        htmlFor=\"password\"\n                        type=\"password\"\n                        label=\"Password\"\n                        value={formData.password}\n                        onChange={e => handleInputChange(e, 'password')}\n                        error={errors?.password}\n                    />\n\n                    {\n                        action === 'register' && <>\n                            {/* First Name */}\n                            <FormField htmlFor=\"firstName\" label='First Name' onChange={e => handleInputChange(e, 'firstName')} value={formData.firstName} error={errors?.firstName} />\n                            {/* Last Name */}\n                            <FormField htmlFor=\"lastName\" label='Last Name' onChange={e => handleInputChange(e, 'lastName')} value={formData.lastName} error={errors?.lastName} />\n                        </>\n                    }\n\n                    <div className=\"w-full text-center\">\n                        <button type=\"submit\" name=\"_action\" value={action} className=\"rounded-xl mt-2 bg-yellow-300 px-3 py-2 text-blue-600 font-semibold transition duration-300 ease-in-out hover:bg-yellow-400 hover:-translate-y-1\">\n                            {\n                                action === 'login' ? \"Sign In\" : \"Sign Up\"\n                            }\n                        </button>\n                    </div>\n                </form>\n                <div>\n                    <h2 className=\"text-2xl text-white font-extrabold\">Made with \u2764\uFE0F\u200D\uD83D\uDD25</h2>\n                </div>\n            </div>\n        </Layout>\n    )\n}"],
  "mappings": "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",
  "names": []
}
